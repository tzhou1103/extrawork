package com.teamcenter.httpsconn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import javax.net.ssl.HttpsURLConnection;


public class HttpsTester {

	public static String uploadUrl = "https://plm-portal-file-qa.nioint.com/plm-file/tc/uploadPdf";
	public static String updateUrl = "https://do-gateway-dev.nevint.com/api/v1/plm-portal-middle-tc/tchttp/updatePartPdf";

	public static void main(String[] args) {
		try {
//			URL url = new URL(uploadUrl);
			URL url = new URL(null, uploadUrl, new sun.net.www.protocol.https.Handler());
			URLConnection connection = url.openConnection();
			HttpsURLConnection httpsURLConnection = (HttpsURLConnection) connection;
			httpsURLConnection.setSSLSocketFactory(new TLSSocketConnectionFactory());

			httpsURLConnection.setDoOutput(true);
			httpsURLConnection.setDoInput(true);
			httpsURLConnection.setRequestMethod("POST");
			httpsURLConnection.setUseCaches(false);
			httpsURLConnection.setInstanceFollowRedirects(true);
			httpsURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");

			httpsURLConnection.connect();
			// POST请求
			OutputStreamWriter os = null;
			String json = "";
			os = new OutputStreamWriter(httpsURLConnection.getOutputStream());
			os.write("base64=JVBERi0xLjQNCiWhs8XXDQoyIDAgb2JqDQo8PC9MZW5ndGggMjk4OC9TdWJ0eXBlL1hNTC9UeXBl"
					+ "%0D%0AL01ldGFkYXRhPj5zdHJlYW0NCjw%2FeHBhY2tldCBiZWdpbj0i77u%2FIiBpZD0iVzVNME1wQ2VoaUh6%"
					+ "0D%0AcmVTek5UY3prYzlkIj8%2BCjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1w%0D%0AdG"
					+ "s9IkFkb2JlIFhNUCBDb3JlIDUuNC1jMDA1IDc4LjE0NzMyNiwgMjAxMi8wOC8yMy0xMzowMzow%0D%0AMyAgICAgICAgIj"
					+ "4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5%0D%0ALzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KI"
					+ "CAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9%0D%0AIiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3"
					+ "hhcC8xLjAvIgog%0D%0AICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAg%0D%0AICAgICAgICAgIHhtbG"
					+ "5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIj4K%0D%0AICAgICAgICAgPHhtcDpNb2RpZnlEYXRlPjIwMTQtMDYtMDNUMTU6NTI6NTgrMDg6MDA8L"
					+ "3htcDpN%0D%0Ab2RpZnlEYXRlPgogICAgICAgICA8eG1wOkNyZWF0ZURhdGU%2BMjAxNC0wNi0wM1QxNTo1Mjo1OCsw%0D%0AODowMDwveG1wOkNyZWF0ZURhdGU%2BCiAgICAgICAgI"
					+ "Dx4bXA6TWV0YWRhdGFEYXRlPjIwMTQtMDYt%0D%0AMDNUMTU6NTI6NTgrMDg6MDA8L3htcDpNZXRhZGF0YURhdGU%2BCiAgICAgICAgIDxkYzpmb3JtYXQ%2B%0D%0AYXBwbGljYXRpb24v"
					+ "cGRmPC9kYzpmb3JtYXQ%2BCiAgICAgICAgIDx4bXBNTTpEb2N1bWVudElEPnV1%0D%0AaWQ6Y2Y5NzkxNDgtMzVlOC00NmUwLWI0MWMtYzQyN2Y2ODkwMTkwPC94bXBNTTpEb2N1bWVudElE"
					+ "%0D%0APgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD51dWlkOjVmOTJjNzg0LTI5NmUtNDQxMi04ZGM3%0D%0ALTY0OTRhNjZhNTJiYjwveG1wTU06SW5zdGFuY2VJRD4KICAgICAgPC9y"
					+ "ZGY6RGVzY3JpcHRpb24%2B%0D%0ACiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE%2BCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICA"
					+ "gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICA"
					+ "gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg"
					+ "ICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA"
					+ "gICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgIC"
					+ "AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgI"
					+ "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC"
					+ "AgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI"
					+ "CAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAg"
					+ "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICA"
					+ "gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC"
					+ "AgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA"
					+ "gICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgI"
					+ "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgIC"
					+ "AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%"
					+ "0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA"
					+ "gICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA"
					+ "gICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAg"
					+ "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAg"
					+ "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D%0AICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg%0D"
					+ "%0AICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg%0D%0AICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI%2FPg0KZW"
					+ "5kc3RyZWFtDQpl%0D%0AbmRvYmoNCjUgMCBvYmoNCjw8L01ldGFkYXRhIDIgMCBSIC9QYWdlcyAxIDAgUiAvVHlwZS9DYXRh%0D%0AbG9nL0Fjcm9Gb3JtPDw%2BPj4%2BDQplbmRvYmoNCjYgMCBv"
					+ "YmoNCjw8L0FydEJveFsgMC4wMDA0ODgg%0D%0AMCAxMDAgMzBdL0JsZWVkQm94WyAwIDAgMTAwIDMwXS9Db250ZW50cyA3IDAgUiAvQ3JvcEJveFsg%0D%0AMCAwIDEwMCAzMF0vTWVkaWFCb3hbIDA"
					+ "gMCAxMDAgMzBdL1BhcmVudCAxIDAgUiAvUmVzb3VyY2Vz%0D%0APDwvRXh0R1N0YXRlPDwvR1MwIDggMCBSID4%2BL1Byb3BlcnRpZXM8PC9NQzAgOSAwIFIgPj4%2BPi9S%0D%0Ab3RhdGUgMC9Ucm"
					+ "ltQm94WyAwIDAgMTAwIDMwXS9UeXBlL1BhZ2U%2BPg0KZW5kb2JqDQo3IDAgb2Jq%0D%0ADQo8PC9GaWx0ZXIvRmxhdGVEZWNvZGUvTGVuZ3RoIDEyMTQ%2BPnN0cmVhbQ0KSImEVsuOG0cM%2FJX%2"
					+ "B%0D%0AAc022U02%2BxrH8CULxNlDzoawfgDrwFYSBPn7VLFHWskQECygJWc4zWKxyJmHXz78%2B3wqD49vavnp%0D%0A5zel1E0CP10Hfn1EOX0qD78%2Bn47P3%2F76%2B8NLOX0pD%2B%2Beavn0J"
					+ "%2B7XKqWWObc5Z2m1nJ7LxzLHZkW3%0D%0A1no5TFi2Ln9HJEKk1nJYob%2BXP4rk32%2Fvimxa%2Fim9PJb7BzztoYDzvTArjiottggfRWRz6a0cv%2BaN%0D%0Arzhtuu4AX3CW%2Bdi9tlUEwraA3Y"
					+ "LFypByhDca72j00hHLJ3oX2Co8y7sjqgNb3WZzWEM7MjVtsCMM%0D%0AdvAgQwoWoDNgi9KOONtts9CMoofjuuJ3uuOKBtO5wRxzZLbWrPjWpOHBaQLbbfIQWAGGiFtGhzdx%0D%0AXfnw2KoqKUAPaRPTg"
					+ "dX3dEHI53IA3%2BL8V8NBGH0ExiaIeuHDvadnyR9z0nNkU1yLrXrLUgRnzmGJ%0D%0AVSoThpE%2FM9reaE%2BdsJuMLLtLoq0kZAxndcFqKu7jSg9E%2BaaWhAkrbpAhmIi228iL7Mf0WHM4TyHd%0D%0AIL0"
					+ "P2NLYjVEjM87R4IlnRu%2Fo30DPbLM6YTefGaXGzlZhZydwgTJ19sbxOJzuq8o26DmeokqMTiiF%0D%0AZSPvkPbsCpCQ3yZJ4E52hyNn84hOfCzvrxTdwTJlKIYMoOWiaKXCU8NsIHu%2BO23zmsDZm5mXZe%2"
					+ "BH%0D%0AIjWKINDuLLUPtsObJgVLYGPy2EmGA1VDB9m%2FZZtJBsUgnzNS9ciB6exUfa%2BNyLRlFKWk6KymMkbO%0D%0AmuaVs70LcY2hvCoRBKPZEMtSohBNtaW9ME9vZN0%2BLD1GsOMte8VZ5GiFrAEUYwpO"
					+ "LPQ2aTdURXUR%0D%0A%2B2wj1UMg2A0yqRilepiF9szaNaPogSDqSFIvlodGljKXputqvXVS17UtUeScomqKwtaKCYgIFXKu%0D%0AOC8zy0VSFDPyTq%2BrLWwS3LEGCOvrAN2AMi4Jp%2BM6Ex4XT5IHegzg%2FO"
					+ "IhQUMCTOySzIDi%2BKCTNbJy%0D%0AWOOCgBTntLVOqFi47mQndMEyEudoOpzWmFohqrU3qAEd6RAiaMS2o8QndciD03MqaqzzqnFDdZGz%0D%0Ac4TK0yRyamSXREuR3A6JcclgTgXDKP1qSDAWYldrX4y717rlSot"
					+ "cWQ3iQnHoFBcqF4PVlHJ2CMWF%0D%0AZ5%2BEo6CUsuYo1EqBeJb0OXnEpgK5XGHInyPC5eYrcyxvZFfY%2FQyVbIuBiYvLViyJxIR7SIHRnbxL%0D%0Atm2PtjtUOGaTS1AovqsXYI6Zl7lJHgMVz5Ze373c7pK8qK"
					+ "zFP3ZPKTKXRG7a0%2BsXr%2FMD4RwIZ5wf%0D%0AeyX%2BR5CjU1uyQGJwblHa5T1zoPb08hJKN1FHJG%2BQDkvQs8PAuCnBd89%2FwIL24OviCpIObA%2FIWLEN%0D%0AcmG%2Ffjl07nTsXy51NoDTStnjnZVqPAgkV"
					+ "XO3SzLIB5noKRP5bSIJLgfnf2l4nVwSseE9%2BzsXg5F7%0D%0ARnUJKCRvyliz65VbunVfAtrny1ZbOh%2F0yM5S7Fw%2BQjENvPTYljYY%2BHTTFADSCVFgiCIH8A6wRW7k%0D%0AV5GOW1w3sOwWluyw5A6usePyxG"
					+ "X3cLXgjApfvHEXl9%2FD1f4fV7umS3Zc%2FRaX3eB6%2B4hv4vflPwEG%0D%0AAFYwMdMNCmVuZHN0cmVhbQ0KZW5kb2JqDQoxMSAwIG9iag0KPDwvVHlwZSAvT2JqU3RtIC9OIDQv%0D%0ARmlyc3QgMjEvTGVuZ3Ro"
					+ "IDI1MS9GaWx0ZXIgL0ZsYXRlRGVjb2RlPj5zdHJlYW0NCnicfY9LTsNA%0D%0AEESv0rskYtHz8TgGRZZMHCGETCwcsYmyGHCDRtieyDPhs%2BUanIILcJvcgyFOtiyr9aqrigMDCXIK%0D%0ACXAu4BwEi2A2w7nddR"
					+ "443pjarSEO1B1scPWxJSz1M7k0%2FYN60t7YLteexvmFYDxiMZNcKaGSM5aM%0D%0AGBtNsLD1v8DhVXZdwZNuHOFlgbe2b3WD8ywUWJbH%2B7Isgqwy8P2OsCq0ewlgR0Opxbu%2FqnyIwUcd%0D%0AMLsdXENN29h%2"
					+ "BHZYJEYEU0ziBWCmpNpibtqX6GLCojdcPDQ0BZU%2Bvht5OwnQ%2BgAexMr6h8f7rZ%2F%2F9%0D%0ACXyC98aZky1NfwHtFWVNDQplbmRzdHJlYW0NCmVuZG9iag0KMTIgMCBvYmoNCjw8L1R5cGUgL1hS%0D%0AZWY"
					+ "vV1sxIDQgMl0vSW5kZXhbMCAxM10vU2l6ZSAxMy9GaWx0ZXIgL0ZsYXRlRGVjb2RlL0RlY29k%0D%0AZVBhcm1zPDwvQ29sdW1ucyA3L1ByZWRpY3RvciAxMj4%2BL0xlbmd0aCA3NC9Sb290IDUgMCBSIC9J%0D%0A"
					+ "bmZvIDMgMCBSIC9JRFs8OUYxN0M5OENCMjBDMDQ0NUJFNEQwRjQ3MjY1NkU2ODg%2BPDk0RUZFRTA2%0D%0AQTcyRTE4MjQ4MzRGODgyMkRDMjlCMDE3Pl0%2BPnN0cmVhbQ0KeJxjYgCB%2F%2F%2BZmIAUNyMj038"
					+ "gzcbA%0D%0AwMQIpH8xMDL9A9JfGf6D%2BDy8QHGQcj8IzfgLou7zNgawdpAQVP1fkLhQDFRdAgMDAPKtDesNCmVu%0D%0AZHN0cmVhbQ0KZW5kb2JqDQoNCnN0YXJ0eHJlZg0KNTA1Mg0KJSVFT0YNCg%3D%3D&fileName=E0000419AA.pdf");
			os.flush();

			json = getResponse(httpsURLConnection);
			System.out.println(json);

			if (connection != null) {
				httpsURLConnection.disconnect();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static String getResponse(HttpURLConnection Conn) throws IOException {

		InputStream is;
		if (Conn.getResponseCode() >= 400) {
			is = Conn.getErrorStream();
		} else {
			is = Conn.getInputStream();
		}

		String response = "";
		byte buff[] = new byte[512];
		int b = 0;
		while ((b = is.read(buff, 0, buff.length)) != -1) {
			response += new String(buff, 0, b);

		}
		is.close();

		System.out.println(response);
		return response;
	}

}
